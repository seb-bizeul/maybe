// @flow
export type Maybe<A> = JustT<A> | NothingT

type JustT<A> = {|
  +value: A,
  +type: 'Just'
|}

type NothingT = {|
  +type: 'Nothing'
|}

declare export function Just<A>(x: A): Maybe<A>

declare export function Nothing<A>(): Maybe<A>

declare export function of<A>(x: A): Maybe<A>

declare export function fromNullable<A>(x: A): Maybe<A>

declare export var map:
  & (<A, B>(f: A => B) => (x: Maybe<A>) => Maybe<B>)
  & (<A, B>(f: A => B, x: Maybe<A>) => Maybe<B>)

declare export var chain:
  & (<A, B>(f: A => Maybe<B>) => (x: Maybe<A>) => Maybe<B>)
  & (<A, B>(f: A => Maybe<B>, x: Maybe<A>) => Maybe<B>)

declare export var flatMap:
  & (<A, B>(f: A => Maybe<B>) => (x: Maybe<A>) => Maybe<B>)
  & (<A, B>(f: A => Maybe<B>, x: Maybe<A>) => Maybe<B>)

declare export var ap:
  & (<A, B>(x: Maybe<A>) => (f: Maybe<A => B>) => Maybe<B>)
  & (<A, B>(x: Maybe<A>, f: Maybe<A => B>) => Maybe<B>)

declare export var fold:
  & (<A, B>(n: (() => B), j: (A => B)) => Maybe<A> => B)
  & (<A, B>(n: (() => B), j: (A => B), Maybe<A>) => B)

declare export var isJust: <A>(x: Maybe<A>) => boolean

declare export var isNothing: <A>(x: Maybe<A>) => boolean

declare export var get: <A>(x: Maybe<A>) => A

declare export var getOrElse:
  & (<A>(f: void => A) => (x: Maybe<A>) => A)
  & (<A>(f: void => A, x: Maybe<A>) => A)

declare export var equals:
  & (<A>(x: Maybe<A>) => (y: Maybe<A>) => boolean)
  & (<A>(x: Maybe<A>, y: Maybe<A>) => boolean)