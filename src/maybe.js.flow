// @flow
export type Maybe<A> = JustT<A> | NothingT

type JustT<A> = {|
  +value: A,
  +type: 'Just'
|}

type NothingT = {|
  +type: 'Nothing'
|}

declare export function Just<A>(value: A): Maybe<A>

declare export function Nothing<A>(): Maybe<A>

declare export function of<A>(value: A): Maybe<A>

declare export function fromNullable<A>(value: A): Maybe<A>

declare export function map<A, B>(fn: A => B, maybe: Maybe<A>): Maybe<B>

declare export function chain<A, B>(fn: A => Maybe<B>, maybe: Maybe<A>): Maybe<B>

declare export function flatMap<A, B>(fn: A => Maybe<B>, maybe: Maybe<A>): Maybe<B>

declare export function ap<A, B>(maybe: Maybe<A>, fn: Maybe<A => B>): Maybe<B>

declare export function get<A>(maybe: Maybe<A>): A

declare export function getOrElse<A>(fn: () => A, maybe: Maybe<A>): A

declare export function equals<A>(maybe1: Maybe<A>, maybe2: Maybe<A>): boolean

declare export function isJust<A>(maybe: Maybe<A>): boolean

declare export function isNothing<A>(maybe: Maybe<A>): boolean
